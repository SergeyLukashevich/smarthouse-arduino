apply plugin: 'cpp'

model {
    toolChains {
        gcc(Gcc) {
        }
    }
    repositories {
        libs(PrebuiltLibraries) {
            googleMock {
                headers.srcDir "dependencies/gmock/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("dependencies/gmock/lib/libgmock.a")
                    staticLibraryFile = file("dependencies/gmock/lib/libgmock_main.a")
                }
            }
            googleTest {
                headers.srcDir "dependencies/gtest/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("dependencies/gtest/lib/libgtest.a")
                    staticLibraryFile = file("dependencies/gtest/lib/libgtest_main.a")
                }
            }
        }
    }
    components {
        all {
            it.baseName "unittests"
            it.sources.cpp {
                source {
                    srcDir "mocks"
                    include "*.cpp"
                }
                exportedHeaders {
                    srcDirs "../sketches", "../libraries", "mocks"
                }
            }
            it.binaries.all {
                cppCompiler.args '-std=gnu++17', '-ggdb', '-O0', '-Werror', '-Wall', '-DUNITTESTS'
                linker.args '-static'
                lib library: 'googleMock', linkage: 'static'
                lib library: 'googleTest', linkage: 'static'
            }
        }

        MotionLightWithRelayTests(NativeExecutableSpec) {
            sources.cpp.source.srcDir "tests/MotionLightWithRelayTests"
        }
        LightSwitchACTests(NativeExecutableSpec) {
            sources.cpp.source.srcDirs "tests/LightSwitchACTests", "../sketches/LightSwitchAC"
        }
        KitchenTests(NativeExecutableSpec) {
            sources.cpp.source.srcDirs "tests/Kitchen", "../sketches/Kitchen"
        }
    }
}
